import type ;
type.register FLUX : flux ;

import toolset : flags ;
flags flux.makemodule OFLUXINCS <include> ;

import generators ;
generators.register-standard flux.makemodule : FLUX : CPP H ;
actions makemodule
{
    outdir=
    for file in $(<)
    do
        outdir=`dirname $file`
    done
    bindir=`echo $outdir | sed s/bin.*/bin/`

    modulename=`basename $(>) .flux | sed s/OFluxGenerate_//`

    fluxfile=
    fluxcompiler=`find | grep ofluxcompiler`
    incs=
    index=0
    for cur in $(>)
    do
        filebase=`basename $cur`
        if [ "$filebase" = "$modulename.flux" ] ; then
            fluxfile=$cur
        fi

        incdir=`dirname $cur`
        incs="$incs -I $incdir"

        index=`expr $index + 1`
    done

    ofluxflags=-absterm
    generatedfilename=OFluxGenerate

    grep -w plugin $fluxfile
    if [ "$?" -eq "0" ]; then
        ofluxflags="-p $modulename"
        generatedfilename="OFluxGenerate_$modulename"
    fi

    grep -w module $fluxfile
    if [ "$?" -eq "0" ]; then
        ofluxflags="-a $modulename"
        generatedfilename="OFluxGenerate_$modulename"
    fi

    for inc in $(OFLUXINCS)
    do
        incs="$incs -I $inc"
    done

    base=`basename $fluxfile .flux`
    echo $(>)
    #assumes ${>[0]} is the oflux compiler
    echo "$fluxcompiler $ofluxflags $incs $fluxfile"
    $fluxcompiler $ofluxflags $incs $fluxfile

    mv $generatedfilename.cpp $outdir
    mv $generatedfilename.h $outdir
    mv $modulename*.dot $outdir
    linkdir=`echo $outdir | sed s/.*bin\\\\///`
    ln -sf $linkdir $bindir/gen
}
